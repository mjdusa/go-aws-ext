---
name: CI

on:
  workflow_dispatch:

  workflow_call:

  push:
    branches:
      - main

  pull_request:
    branches:
      - main

# Don't grant any access by default
permissions: {}

env:
  target_ref: ${{ github.head_ref || github.ref_name }}
  GO111MODULE: on
  GOPRIVATE: ''

jobs:
  ci:
    name: ci
    strategy:
      matrix:
        go-version: ['stable']  # only use ONE version of go here or the upload-artifact will fail
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    ############################################
    # Grant status permission for MULTI_STATUS #
    ############################################
    permissions:
      contents: read
      packages: read
      statuses: write

    steps:
      - name: actions/checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ env.target_ref }}
          token: ${{ github.token }}
          persist-credentials: false  # otherwise, the token used is the GITHUB_TOKEN, instead of your
          #                             personal access token.
          fetch-depth: 0

      - name: actions/setup-go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: go version, env, & clean --cache
        run: |
          go version
          go env
          go clean --cache

      - name: go mod tidy
        run: |
          go mod tidy

      - name: golangci/golangci-lint-action
        uses: golangci/golangci-lint-action@v8
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the
          # latest version. When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash
          # of a commit.
          version: latest

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"

          # Optional: When using only-new-issues option, the GitHub API is used, so a token is required.
          # github-token:

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues:

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          # args: --timeout=30m --config=/my/path/.golangci.yml --issues-exit-code=0
          args: --verbose
            --tests=true
            --timeout=1m
            --config=.github/linters/.golangci.yml
            --issues-exit-code=1

          # Optional: Force the usage of the embedded problem matchers.
          # problem-matchers: true

          # Optional: If set to true, then all caching functionality will be completely
          # disabled, takes precedence over all other caching options.
          # skip-cache: true

          # Optional: If set to true, caches will not be saved, but they may still be
          # restored, required skip-cache: false.
          # skip-save-cache: true

          # Optional: Periodically invalidate the cache every cache-invalidation-interval
          # days to ensure that outdated data is removed and fresh data is loaded.
          # cache-invalidation-interval: 7

      - name: go test
        run: |
          go env
          go test -v -race -coverprofile=coverage.gcov -covermode=atomic ./...
          go test -v -coverprofile=coverage.gcov -covermode=count ./...
          go tool cover -func=coverage.gcov -o=coverage.out

      - name: jandelgado/gcov2lcov-action
        uses: jandelgado/gcov2lcov-action@v1
        with:
          infile: coverage.gcov
          outfile: coverage.lcov

      - name: VeryGoodOpenSource/very_good_coverage
        uses: VeryGoodOpenSource/very_good_coverage@v3
        with:
          path: coverage.lcov
          min_coverage: 50

      # Upload generated artifacts for historical reference
      - name: actions/upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: ./coverage.*
          retention-days: 90
